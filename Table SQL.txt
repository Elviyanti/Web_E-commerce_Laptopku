CREATE TABLE users (
	id_user INT PRIMARY KEY,
	username VARCHAR (50),
	email VARCHAR (100),
	password VARCHAR (255),
	telepon VARCHAR (100),
	alamat VARCHAR (100),
	image_path VARCHAR (255),
	role_id_user integer,
	updated_at timestamp
);

CREATE TABLE roles (
    role_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
);

INSERT INTO roles (role_id, name) VALUES (1, 'Customer'), (2, 'Admin');

ALTER TABLE users
ADD CONSTRAINT fk_users_roles_user
FOREIGN KEY (role_id_user) REFERENCES roles(role_id);

-- 2. Membuat fungsi trigger
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;  -- Set updated_at ke waktu saat ini
    RETURN NEW;  -- Kembalikan baris yang diperbarui
END;
$$ LANGUAGE plpgsql;

-- 3. Membuat trigger
CREATE TRIGGER set_updated_at
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE PROCEDURE update_timestamp();

-- Buat tabel Products
CREATE TABLE Products (
    id_product SERIAL PRIMARY KEY,
    merk VARCHAR(255) NOT NULL,
    variety VARCHAR(255) NOT NULL,
    ssd_hdd VARCHAR(10) CHECK (ssd_hdd IN ('SSD', 'HDD')),
    processor VARCHAR(255) NOT NULL,
    ram VARCHAR(10) NOT NULL,
    vga VARCHAR(255),
    screen_size DECIMAL(5, 2),
    storages VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    purpose VARCHAR(255),
    feature TEXT,
    image_path VARCHAR(255),
    stock INTEGER NOT NULL DEFAULT 0
);

ALTER TABLE products
ADD COLUMN updated_at TIMESTAMP DEFAULT NULL;

CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;  -- Set updated_at ke waktu saat ini
    RETURN NEW;  -- Kembalikan baris yang diperbarui
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_updated_at
BEFORE UPDATE ON products
FOR EACH ROW
EXECUTE PROCEDURE update_timestamp();

-- Buat tabel In_Product
CREATE TABLE In_Product (
    id_in SERIAL PRIMARY KEY,
    id_product INTEGER NOT NULL,
    in_date DATE NOT NULL,
    quantity INTEGER NOT NULL,
    FOREIGN KEY (id_product) REFERENCES Products(id_product)
);

-- Buat tabel Out_Product
CREATE TABLE Out_Product (
    id_out SERIAL PRIMARY KEY,
    id_product INTEGER NOT NULL,
    out_date DATE NOT NULL,
    quantity INTEGER NOT NULL,
    FOREIGN KEY (id_product) REFERENCES Products(id_product)
);



-- Buat tabel Review
CREATE TABLE Review (
    id_review SERIAL PRIMARY KEY,
    id_user INTEGER NOT NULL,
    id_product INTEGER NOT NULL,
    rating INTEGER CHECK (rating BETWEEN 1 AND 5),
    review_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    review_text TEXT NOT NULL,
    FOREIGN KEY (id_user) REFERENCES Users(id_user),
    FOREIGN KEY (id_product) REFERENCES Products(id_product)
);

-- Buat tabel Cart
CREATE TABLE Cart (
    id_cart SERIAL PRIMARY KEY,
    id_user INTEGER NOT NULL,
    id_product INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    FOREIGN KEY (id_user) REFERENCES Users(id_user),
    FOREIGN KEY (id_product) REFERENCES Products(id_product)
);

-- Buat tabel Orders
CREATE TABLE Orders (
    id_order SERIAL PRIMARY KEY,
    id_user INTEGER NOT NULL,
    id_product INTEGER NOT NULL,
    id_out INTEGER,
    recipent_name VARCHAR(255) NOT NULL,
    product_price DECIMAL(10, 2) NOT NULL,
    total_price DECIMAL(10, 2) NOT NULL,
    shipping_type VARCHAR(255) NOT NULL,
    resi VARCHAR(255),
    payment_status VARCHAR(10) CHECK (payment_status IN ('paid', 'not paid')),
    FOREIGN KEY (id_user) REFERENCES Users(id_user),
    FOREIGN KEY (id_product) REFERENCES Products(id_product),
    FOREIGN KEY (id_out) REFERENCES Out_Product(id_out)
);

-- Buat tabel Status_Orders
CREATE TABLE Status_Orders (
    id_status SERIAL PRIMARY KEY,
    id_order INTEGER NOT NULL,
    status_delivery VARCHAR(10) CHECK (status_delivery IN ('not paid', 'packaged', 'shipped', 'completed')),
    order_date DATE NOT NULL,
    payment_date DATE,
    delivery_date DATE,
    arrived_date DATE,
    FOREIGN KEY (id_order) REFERENCES Orders(id_order)
);

-- Ubah tabel users agar id_user otomatis terisi
ALTER TABLE users 
ALTER COLUMN id_user 
ADD GENERATED BY DEFAULT AS IDENTITY;

ALTER TABLE Status_Orders
    ALTER COLUMN order_date TYPE TIMESTAMP WITHOUT TIME ZONE,
    ALTER COLUMN payment_date TYPE TIMESTAMP WITHOUT TIME ZONE,
    ALTER COLUMN delivery_date TYPE TIMESTAMP WITHOUT TIME ZONE,
    ALTER COLUMN arrived_date TYPE TIMESTAMP WITHOUT TIME ZONE;